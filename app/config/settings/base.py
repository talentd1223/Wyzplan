"""
Django settings for mobelux project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta
import logging
from pathlib import Path
import os
import sys

import dj_database_url
import django_structlog.processors
import environ
import sentry_sdk
import structlog
from sentry_sdk.integrations.django import DjangoIntegration
from structlog_sentry import SentryJsonProcessor
from corsheaders.defaults import default_headers

env = environ.Env()

TESTING = sys.argv[1:2] == ["test"]
SITE_ID = 1

# Converting to strings to minimize complex objects in settings
CONFIG_DIR = str(Path(__file__).resolve().parent.parent)
BASE_DIR = str(Path(CONFIG_DIR).parent)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "")

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=315360000'}

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# Lazy handlng of ALLOWED_HOSTS because AWS load balancers do healthchecks against specific IPs which
# we do not know without a bunch of runtime startup fiddling to set this more specifically
ALLOWED_HOSTS = ["*"]

# Application definition

AUTH_USER_MODEL = "users.User"
AUTH_PROFILE_MODULE = None
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)
LOGIN_URL = "/login/"
LOGOUT_URL = "/logout/"
LOGIN_REDIRECT_URL = "/account/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "debug_toolbar.apps.DebugToolbarConfig",
    "rest_framework",
    "corsheaders",
    "waffle",
    "wyzplan.core.apps.CoreConfig",
    "wyzplan.users.apps.UsersConfig",
    "wyzplan.accounts.apps.AccountsConfig",
    "wyzplan.plaid.apps.PlaidConfig",
]

CORS_ALLOWED_ORIGINS = (
    'http://localhost:3000',
    'http://127.0.0.1:3000',
)

CORS_ALLOW_HEADERS = list(default_headers) + [
    'X-Access-Token',
]


# Ordering based on https://docs.djangoproject.com/en/3.1/ref/middleware/#middleware-ordering
# and http://whitenoise.evans.io/en/stable/django.html#enable-whitenoise
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "waffle.middleware.WaffleMiddleware",
    'wyzplan.dark_site.middleware.dark_site_middleware',  # must come after waffle
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'wyzplan.core.middleware.TimezoneMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'AUTH_HEADER_TYPES': ('Bearer','JWT'),
    'AUTH_HEADER_NAME': 'HTTP_X_ACCESS_TOKEN',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(CONFIG_DIR, "templates"),
            # frontend/build so that django can find the index.html compiled by create-react-app in development
            os.path.join(BASE_DIR, "frontend/build"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {"default": dj_database_url.config(conn_max_age=600)}

if REDIS_URL := os.environ.get('REDIS_URL'):
    if REDIS_URL.startswith('rediss://') and 'ssl_cert_reqs' not in REDIS_URL:
        REDIS_URL = f'{REDIS_URL}?ssl_cert_reqs=none'
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
        },
    }

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = False

USE_L10N = False

USE_TZ = True


# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.0/ref/contrib/staticfiles/#manifeststaticfilesstorage
# Breaking from our default of using whitenoise.storage.CompressedManifestStaticFilesStorage
# because all end user facing js and css is being handled by create-react-app scripts
# and those hash the files with no good way to turn that off.
# it's possible WHITENOISE_ROOT could be used to work around some of this by serving files managed by
# create-react-app directly.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
REACT_APP_DIR = os.path.join(BASE_DIR, 'frontend')

STATICFILES_DIRS = [
    # Wonky directory setup here to deal with create-react-app lack of configurability
    # in the Dockerfile when building the production image we will delete the extra static_collected/static/
    os.path.join(REACT_APP_DIR, 'build/static'),
    os.path.join(REACT_APP_DIR, 'build'),
]
STATIC_ROOT = os.path.join(BASE_DIR, "static_collected")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")

WAFFLE_CREATE_MISSING_FLAGS = True
WAFFLE_CREATE_MISSING_SWITCHES = True
WAFFLE_FLAG_DEFAULT = False
WAFFLE_SWITCH_DEFAULT = False


structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        SentryJsonProcessor(level=logging.ERROR),
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    context_class=structlog.threadlocal.wrap_dict(dict),
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)
LOGGING = {
    "version": 1,
    # 'disable_existing_loggers': True,
    "disable_existing_loggers": False,
    "root": {
        "level": os.environ.get("LOG_LEVEL", "INFO"),
        "handlers": ["console_json"],
    },
    "formatters": {
        "verbose": {"format": "%(levelname)s %(asctime)s %(module)s " "%(process)d %(thread)d %(message)s"},
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
            'foreign_pre_chain': [
                 django_structlog.processors.inject_context_dict,
                 structlog.processors.TimeStamper(fmt='iso'),
                 structlog.stdlib.add_logger_name,
                 structlog.stdlib.add_log_level,
                 structlog.stdlib.PositionalArgumentsFormatter(),
             ],
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.KeyValueRenderer(key_order=["timestamp", "level", "event", "logger"]),
        },
    },
    "handlers": {
        "console_json": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "json_formatter",
        },
        "console_plain": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "plain_console",
        },
        "console_key_value": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "key_value",
        },
    },
    "loggers": {
        "django": {
            "level": os.environ.get("LOG_LEVEL", "INFO"),
            "handlers": ["console_json"],
            "propagate": False,
        },
        # only when not manage.py runserver
        "django.request": {
            "handlers": ["console_json"],
            "level": os.environ.get("LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console_json"],
            "level": os.environ.get("LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        # only happens with manage.py runserver
        "django.server": {
            "handlers": ["console_json"],
            "level": "DEBUG",
            "propagate": False,
        },
        "execution_timing": {
            "handlers": ["console_json"],
            "level": "DEBUG",
        },
        # Log SQL queries - noisy, but sometimes useful
        # 'django.db.backends': {'handlers': ['console_plain'], 'level': 'DEBUG', 'propagate': False,},
    },
    # might want django.request logger at DEBUG level
}

DJANGO_ENV = os.environ.get('DJANGO_ENV', 'development')
sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN", ''),
    integrations=[DjangoIntegration()],
    traces_sample_rate=0.2,
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)

# COVERAGE_PATH_EXCLUDES = [r'.svn', r'.git', r'templates', r'static']
DJANGO_MAILVIEWER_ENABLED = False
DARK_SITE_MIDDLEWARE_ENABLED = env('DARK_SITE_MIDDLEWARE_ENABLED', default=False)
# Add paths such as /login/ or /admin/login/ here so that we can log in on sites
# where this is enabled. Initial feature flag will need set via command line
DARK_SITE_ALLOWED_PATHS = env('DARK_SITE_ALLOWED_PATHS', default=[])
DARK_SITE_ACCESS_TOKENS = env('DARK_SITE_ACCESS_TOKENS', default=[])

PLAID_ENV = env('PLAID_ENV', default='Sandbox')
PLAID_CLIENT_ID = env('PLAID_CLIENT_ID', default='')
PLAID_SECRET = env('PLAID_SECRET', default='')
PLAID_COUNTRY_CODES = env('PLAID_COUNTRY_CODES', default=['US'])
PLAID_PRODUCTS = env('PLAID_PRODUCTS', default=[])

ROBOTS_TXT_RULES = [
    'User-Agent: *',
    'Disallow: /',
]

TEST_RUNNER = 'wyzplan.core.test_runner.TimedLoggingDiscoverRunner'
